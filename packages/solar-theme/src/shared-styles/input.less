.input-focus() {
  border-color: @input-focused-border-color;
  border-style: @input-focused-border-style;
}

.input-solar (@isHost: false) {
  .solar-states(@isHost);

  &[warning] {
    .solar-states(@isHost, @scheme-color-warning);
  }
  &[error], &[error][warning]:not([focused]) {
    .solar-states(@isHost, @scheme-color-error);
  }
  &[highlight] {
    .solar-states(@isHost, @input-border-color, @input-text-color, @input-highlight-background-color);
    &[disabled] {
      background-color: @input-disabled-background-color;
    }
  }
  &[indirect] {
    color: @input-indirect-text-color;
    .solar-states(@isHost, @input-indirect-border-color, @input-indirect-text-color, @input-indirect-background-color);
  }
}

// this should probably not exist
.placeholder(@rules) {

  &::-webkit-input-placeholder {
    @rules();
  }
  &::-moz-placeholder {
    @rules();
  }
  &:-ms-input-placeholder {
    @rules();
  }
}
.solar-states (@isHost, @border-color: @input-border-color, @text-color: @input-text-color, @background-color: @input-background-color) {
  @input-border-color: @border-color;
  @input-text-color: @text-color;
  @input-background-color: @background-color;

  background-color: @input-background-color;
  .border(@input-border-color);

  &[disabled] {
    .border(@input-disabled-border-color);
    color: @input-disabled-text-color;
  }
  &[readonly] {
    .border(@input-readonly-border-color);
  }
  &:not([focused]):not(:focus):not([disabled]):not([readonly]):hover {
    .border(@input-hover-border-color);
  }
}
